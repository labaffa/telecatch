"""alter_user_table_for_fastapiusers

Revision ID: 943caf599aa8
Revises: 9c3a81b3ce71
Create Date: 2024-03-18 19:25:33.680905

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import fastapi_users_db_sqlalchemy
import uuid


# revision identifiers, used by Alembic.
revision: str = '943caf599aa8'
down_revision: Union[str, None] = '9c3a81b3ce71'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
       conn = op.get_bind()
       query = conn.execute(sa.text("SELECT DISTINCT id FROM user;"))
       results = query.fetchall()
       non_uuid_ids = []
       for r in results:
              try:
                     uuid_obj = uuid.UUID(r[0])
              except Exception:
                     non_uuid_ids.append(r[0])
       with op.batch_alter_table('user', schema=None) as batch_op:
              batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
              batch_op.add_column(sa.Column('is_superuser', sa.Boolean(), nullable=True))
              batch_op.add_column(sa.Column('is_verified', sa.Boolean(), nullable=True))
              if (len(non_uuid_ids) > 0) or (not results):
                     batch_op.alter_column('id',
                            existing_type=sa.INTEGER(),
                            type_=fastapi_users_db_sqlalchemy.generics.GUID(),
                            existing_nullable=False)
              batch_op.alter_column('email',
                     existing_type=sa.TEXT(),
                     type_=sa.String(length=320),
                     existing_nullable=False)
              batch_op.alter_column('hashed_password',
                     existing_type=sa.TEXT(),
                     type_=sa.String(length=1024),
                     existing_nullable=False)
              batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
              batch_op.drop_column('disabled')
       try:
              with op.batch_alter_table('user', schema=None) as batch_op:
                     batch_op.drop_constraint('user_username')
       except ValueError:
              pass
       with op.batch_alter_table('active_client', schema=None) as batch_op:
              batch_op.alter_column('user_id',
                     existing_type=sa.INTEGER(),
                     type_=fastapi_users_db_sqlalchemy.generics.GUID(),
                     existing_nullable=False)
       with op.batch_alter_table('user_client', schema=None) as batch_op:
              batch_op.alter_column('user_id',
                     existing_type=sa.INTEGER(),
                     type_=fastapi_users_db_sqlalchemy.generics.GUID(),
                     existing_nullable=False)
       with op.batch_alter_table('channel_collection', schema=None) as batch_op:
              batch_op.alter_column('user_id',
                     existing_type=sa.INTEGER(),
                     type_=fastapi_users_db_sqlalchemy.generics.GUID(),
                     existing_nullable=False)
       with op.batch_alter_table('active_collection', schema=None) as batch_op:
              batch_op.alter_column('user_id',
                     existing_type=sa.INTEGER(),
                     type_=fastapi_users_db_sqlalchemy.generics.GUID(),
                     existing_nullable=False)
       with op.batch_alter_table('channel_custom', schema=None) as batch_op:
              batch_op.alter_column('user_id',
                     existing_type=sa.INTEGER(),
                     type_=fastapi_users_db_sqlalchemy.generics.GUID(),
                     existing_nullable=False)
       with op.batch_alter_table('collection_job', schema=None) as batch_op:
              batch_op.alter_column('user_id',
                     existing_type=sa.INTEGER(),
                     type_=fastapi_users_db_sqlalchemy.generics.GUID(),
                     existing_nullable=False)
       with op.batch_alter_table('user', schema=None) as batch_op:
              
              batch_op.execute(f"""
                     UPDATE user
                     SET is_active = TRUE, is_superuser = FALSE, is_verified = FALSE
                     """
              )
              batch_op.alter_column("is_active", nullable=False)
              batch_op.alter_column("is_superuser", nullable=False)
              batch_op.alter_column("is_verified", nullable=False)
              
       for user_id in non_uuid_ids:
              uuid_obj = uuid.uuid4()
              conn.execute(sa.text(f"""
                     UPDATE user
                     SET id = '{str(uuid_obj)}' 
                     WHERE id = '{user_id}';
                     """)
              )
              conn.execute(sa.text(f"""
                     UPDATE user_client
                     SET user_id = '{str(uuid_obj)}' 
                     WHERE user_id = '{user_id}';
              """))
              conn.execute(sa.text(f"""
                     UPDATE channel_collection
                     SET user_id = '{str(uuid_obj)}' 
                     WHERE user_id = '{user_id}';
              """))
              conn.execute(sa.text(f"""
                     UPDATE active_collection
                     SET user_id = '{str(uuid_obj)}' 
                     WHERE user_id = '{user_id}';
              """))
              conn.execute(sa.text(f"""
                     UPDATE active_client
                     SET user_id = '{str(uuid_obj)}' 
                     WHERE user_id = '{user_id}';
              """))
              conn.execute(sa.text(f"""
                     UPDATE channel_custom
                     SET user_id = '{str(uuid_obj)}' 
                     WHERE user_id = '{user_id}';
              """))
              conn.execute(sa.text(f"""
                     UPDATE collection_job
                     SET user_id = '{str(uuid_obj)}' 
                     WHERE user_id = '{user_id}';
              """))
    # ### end Alembic commands ###


def downgrade() -> None:
       # ### commands auto generated by Alembic - please adjust! ###
       with op.batch_alter_table('user', schema=None) as batch_op:
              batch_op.add_column(sa.Column('disabled', sa.BOOLEAN(), nullable=True))
              batch_op.drop_index(batch_op.f('ix_user_email'))
              batch_op.alter_column('hashed_password',
                     existing_type=sa.String(length=1024),
                     type_=sa.TEXT(),
                     existing_nullable=False)
              batch_op.alter_column('email',
                     existing_type=sa.String(length=320),
                     type_=sa.TEXT(),
                     existing_nullable=False)
              # batch_op.alter_column('id',
              #        existing_type=fastapi_users_db_sqlalchemy.generics.GUID(),
              #        type_=sa.INTEGER(),
              #        existing_nullable=False)
              batch_op.drop_column('is_verified')
              batch_op.drop_column('is_superuser')
              batch_op.drop_column('is_active')
       # with op.batch_alter_table('active_client', schema=None) as batch_op:
       #        batch_op.alter_column('user_id',
       #               existing_type=fastapi_users_db_sqlalchemy.generics.GUID(),
       #               type_=sa.INTEGER(),
       #               existing_nullable=False)
       # with op.batch_alter_table('user_client', schema=None) as batch_op:
       #        batch_op.alter_column('user_id',
       #               existing_type=fastapi_users_db_sqlalchemy.generics.GUID(),
       #               type_=sa.INTEGER(),
       #               existing_nullable=False)
       # with op.batch_alter_table('channel_collection', schema=None) as batch_op:
       #        batch_op.alter_column('user_id',
       #               existing_type=fastapi_users_db_sqlalchemy.generics.GUID(),
       #               type_=sa.INTEGER(),
       #               existing_nullable=False)
       # with op.batch_alter_table('active_collection', schema=None) as batch_op:
       #        batch_op.alter_column('user_id',
       #               existing_type=fastapi_users_db_sqlalchemy.generics.GUID(),
       #               type_=sa.INTEGER(),
       #               existing_nullable=False)
       # with op.batch_alter_table('channel_custom', schema=None) as batch_op:
       #        batch_op.alter_column('user_id',
       #               existing_type=fastapi_users_db_sqlalchemy.generics.GUID(),
       #               type_=sa.INTEGER(),
       #               existing_nullable=False)
       # with op.batch_alter_table('collection_job', schema=None) as batch_op:
       #        batch_op.alter_column('user_id',
       #               existing_type=fastapi_users_db_sqlalchemy.generics.GUID(),
       #               type_=sa.INTEGER(),
       #               existing_nullable=False)
       # conn = op.get_bind()
       # query = conn.execute(sa.text("SELECT DISTINCT id FROM user;"))
       # results = query.fetchall()
       # ids = [r[0] for r in results]
       # for i, user_id in enumerate(ids):
       #        conn.execute(sa.text(f"""
       #               UPDATE user
       #               SET id = {int(i)} 
       #               WHERE id = '{user_id}';
       #               """)
       #        )
       #        conn.execute(sa.text(f"""
       #               UPDATE user_client
       #               SET user_id = {int(i)}
       #               WHERE user_id = '{user_id}';
       #        """))
       #        conn.execute(sa.text(f"""
       #               UPDATE channel_collection
       #               SET user_id = {int(i)} 
       #               WHERE user_id = '{user_id}';
       #        """))
       #        conn.execute(sa.text(f"""
       #               UPDATE active_collection
       #               SET user_id = {int(i)} 
       #               WHERE user_id = '{user_id}';
       #        """))
       #        conn.execute(sa.text(f"""
       #               UPDATE active_client
       #               SET user_id = {int(i)} 
       #               WHERE user_id = '{user_id}';
       #        """))
       #        conn.execute(sa.text(f"""
       #               UPDATE channel_custom
       #               SET user_id = {int(i)} 
       #               WHERE user_id = '{user_id}';
       #        """))
       #        conn.execute(sa.text(f"""
       #               UPDATE collection_job
       #               SET user_id = {int(i)} 
       #               WHERE user_id = '{user_id}';
       #        """))              



    # ### end Alembic commands ###
